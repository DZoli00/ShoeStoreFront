import cv2
import numpy as np
from scipy.stats import itemfreq
from sqlalchemy import true


def get_dominant_color(image, n_colors):
    # reshape the original image
    pixels = np.float32(image).reshape((-1, 3))

    # each time 200 iterations run, return the answer
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, .1)

    # set the flags to avoid line break
    flags = cv2.KMEANS_RANDOM_CENTERS

    # k-means algorithm that find the centers of cluster_count clusters
    flags, labels, centroids = cv2.kmeans(
        pixels, n_colors, None, criteria, 10, flags)
    palette = np.uint8(centroids)

    # return BGR indexes
    return palette[np.argmax(itemfreq(labels)[:, -1])]


def print_image(frame, circle):
    cv2.imshow('originalImage', frame)

    cv2.circle(frame, (circle[0], circle[1]), circle[2], (0, 255, 0), 2)

    cv2.imshow('image', frame)
    cv2.waitKey(10000000)


def get_circles(frame):
    # transform the image in gray scale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # apply median filter to the gray image
    img = cv2.medianBlur(gray, 37)

    # find circles in imperfect images
    # one circle is (x-center, y-center, radius)
    circles = cv2.HoughCircles(img, cv2.HOUGH_GRADIENT, 1, 50, param1=120, param2=15)

    return circles


while true:
    cv2.waitKey(1)
    frame = cv2.imread("images/dreapta_curba.png")

    circles = get_circles(frame)

    # all sign that are circle shaped
    if not circles is None:

        # round the values of the circles for better calculus
        circles = np.uint16(np.around(circles))
        max_r, max_i = 0, 0

        # find the biggest circle
        for i in range(len(circles[:, :, 2][0])):
            if circles[:, :, 2][0][i] > 50 and circles[:, :, 2][0][i] > max_r:
                max_i = i
                max_r = circles[:, :, 2][0][i]

        x, y, r = circles[:, :, :][0][max_i]
        if y > r and x > r:
            # we put the circle inside a rectangle
            square = frame[y - r:y + r, x - r:x + r]

            # get the dominant color from the shape in BGR
            dominant_color = get_dominant_color(square, 2)

            # red color is dominant
            if dominant_color[2] > 150:
                print("STOP")

            # blue color is dominant
            elif dominant_color[0] > 125:
                square = cv2.resize(square, (250, 250))
                zone_0 = square[square.shape[0] // 2 - 50: square.shape[0] // 2 + 50,
                         square.shape[1] // 2 - 50: square.shape[1] // 2 + 50]
                zone_0_color = get_dominant_color(zone_0, 1)

                zone1_verify = False
                zone2_verify = False
                zone3_verify = False
                zone4_verify = False

                if zone_0_color[0] > 125 and zone_0_color[1] < 125 and zone_0_color[2] < 125:
                    print("SENS GIRATORIU")
                    print_image(frame, [x, y, r])
                    continue

                center_x = square.shape[0] // 2
                center_y = square.shape[1] // 2

                zone_1 = square[0:center_y, center_x: square.shape[1]]
                zone_1_color = get_dominant_color(zone_1, 1)

                if zone_1_color[1] > 125 or zone_1_color[2] > 125:
                    zone1_verify = True

                zone_2 = square[0:center_y, 0: center_x]
                zone_2_color = get_dominant_color(zone_2, 1)

                if zone_2_color[1] > 125 or zone_2_color[2] > 125:
                    zone2_verify = True

                zone_3 = square[center_y:square.shape[0], 0: center_x]
                zone_3_color = get_dominant_color(zone_3, 1)

                if zone_3_color[1] > 125 or zone_3_color[2] > 125:
                    zone3_verify = True

                zone_4 = square[center_y:square.shape[0], center_x: square.shape[1]]
                zone_4_color = get_dominant_color(zone_4, 1)

                if zone_4_color[1] > 125 or zone_4_color[2] > 125:
                    zone4_verify = True

                if zone1_verify == True and zone2_verify == False and zone3_verify == False and zone4_verify == True:
                    print("DREAPTA")
                    print_image(frame, [x, y, r])
                    continue
                elif zone1_verify == True and zone2_verify == False and zone3_verify == True and zone4_verify == False:
                    print("DREAPTA")
                    print_image(frame, [x, y, r])
                    continue
                elif zone1_verify == False and zone2_verify == True and zone3_verify == True and zone4_verify == True:
                    print("INAINTE SAU DREAPTA")
                    print_image(frame, [x, y, r])
                    continue
                elif zone1_verify == False and zone2_verify == True and zone3_verify == True and zone4_verify == False:
                    print("STANGA")
                    print_image(frame, [x, y, r])
                    continue
                elif zone1_verify == False and zone2_verify == True and zone3_verify == False and zone4_verify == False:
                    print("STANGA")
                    print_image(frame, [x, y, r])
                    continue
                elif zone1_verify == True and zone2_verify == False and zone3_verify == True and zone4_verify == True:
                    print("INAINTE SAU STANGA")
                    print_image(frame, [x, y, r])
                    continue

            # green color is dominant
            else:
                print("N/A")

cv2.destroyAllWindows()
